import asyncio
import logging
import random
import string
from datetime import datetime, timedelta
import re
import os
import ssl
import aiohttp

from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.error import BadRequest
from telegram.ext import ConversationHandler, ContextTypes
from telegram.constants import ParseMode

import db
import scheduler
import web_server
import steam
from poll_state import poll_state

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
POLL_QUESTION = "–•–∞—Ç–∏–º —Å–∞—Å–∞—Ç—å!?!?!"
POLL_OPTIONS = [
    "–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞—Ö—É–π, –¥–∞!",
    "–ê –∫–æ–≥–¥–∞ –Ω–µ —Å–∞—Å–∞—Ç—å?!",
    "–°–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ —Ä–æ—Ç –±–æ–ª–∏—Ç",
    "5-10 –º–∏–Ω—É—Ç –∏ –≥–æ—Ç–æ–≤ —Å–∞—Å–∞—Ç—å",
    "–ü–æ–ª—á–∞—Å–∏–∫–∞ –∏ –±—É–¥—É –ø–∞—Å–∞—Å—ç–æ"
]

# Poll category mappings (0-indexed)
CATEGORY_MAPPING = {
    "accepted": [0, 1],  # Option indices for accepted category
    "declined": [2],  # Option indices for declined category
    "deferred": [3, 4]  # Option indices for deferred category
}


async def update_chat_name(update, chat_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if chat_id is None:
        chat_id = str(update.effective_chat.id)
    
    chat_name = update.effective_chat.title
    if chat_name:
        await db.set_chat_name(chat_id, chat_name)
        logger.debug(f"Updated chat name: {chat_id} -> {chat_name}")
        return True
    elif update.effective_chat.type == 'private':
        # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        user_name = f"–õ–°: {user.first_name}" + (f" {user.last_name}" if user.last_name else "")
        await db.set_chat_name(chat_id, user_name)
        logger.debug(f"Private chat name set: {chat_id} -> {user_name}")
        return True
    return False

async def start(update, context):
    """Send a message when the command /start is issued."""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)

    # Register this chat for daily polls
    poll_state.register_chat(chat_id)

    # Store user info
    await db.store_user_info(update.effective_user)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤.\n"
        "/pol_now - –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞\n"
        "/stop_poll - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n"
        "/link_steam - –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam ID\n"
        "/unlink_steam - –æ—Ç–≤—è–∑–∞—Ç—å Steam ID\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤\n"
        "/set_poll_time - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (–ß–ß:–ú–ú)\n"
        "/get_poll_time - –ø–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞"
    )

async def poll_now_command(update, context):
    """Start a new poll manually."""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)

    # Check if there's already an active poll
    if poll_state.is_active(chat_id):
        await update.message.reply_text("–û–ø—Ä–æ—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    # Leading message for manual poll
    message = f"{user.first_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤—Å–µ—Ö –Ω–∞ –ø–æ—Å–∞—Å–∞—Ç—å!"
    await send_poll(chat_id, context, message, manual=True)

async def stop_poll(update, context):
    """Manually stop the current poll."""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)

    if not poll_state.is_active(chat_id):
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Å–æ—Å–∞.")
        return

    poll_data = poll_state.get_poll_data(chat_id)

    try:
        # Try to stop the poll in Telegram
        await context.bot.stop_poll(
            chat_id=chat_id,
            message_id=poll_data["message_id"]
        )
    except BadRequest:
        # Poll might be already closed
        pass

    # Process the results
    await process_poll_results(chat_id, context)

async def status_command(update, context):
    """Check the status of the current poll."""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)

    if not poll_state.is_active(chat_id):
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Å–æ—Å–∞.")
        return

    poll_data = poll_state.get_poll_data(chat_id)
    votes = poll_data["votes"]

    # Count votes by option
    vote_counts = [0] * len(POLL_OPTIONS)
    for vote in votes.values():
        option_index = vote["option"]
        vote_counts[option_index] += 1

    # Format status message
    status_message = "–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞:\n"
    for i, option in enumerate(POLL_OPTIONS):
        status_message += f"‚Ä¢ {option}: {vote_counts[i]} –≥–æ–ª–æ—Å–æ–≤\n"

    # Add who has voted
    status_message += "\n–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏:\n"
    for vote in votes.values():
        user = vote["user"]
        option = POLL_OPTIONS[vote["option"]]
        status_message += f"‚Ä¢ {user.first_name}: {option}\n"

    # Add who hasn't voted yet
    non_voted = poll_data["all_users"] - poll_data["voted_users"]
    if non_voted:
        status_message += "\n–ï—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏:\n"
        for user_id in non_voted:
            # We don't have user names for those who haven't voted yet
            status_message += f"‚Ä¢ User ID: {user_id}\n"

    await update.message.reply_text(status_message)

async def stats_command(update, context):
    """Display poll statistics."""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)
    
    stats = await db.get_poll_stats(chat_id, POLL_OPTIONS)
    
    total_polls = stats['total_polls']
    most_popular_result = stats['most_popular']
    times = stats['times']
    
    most_popular_option = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if most_popular_result:
        option_index, count = most_popular_result
        most_popular_option = f"{POLL_OPTIONS[option_index]} ({count} –≥–æ–ª–æ—Å–æ–≤)"
    
    avg_time = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if times:
        # Convert times to minutes since midnight
        minutes_list = []
        for (time_str,) in times:
            hour, minute = map(int, time_str.split(':'))
            minutes_since_midnight = hour * 60 + minute
            minutes_list.append(minutes_since_midnight)

        # Calculate average minutes
        avg_minutes = sum(minutes_list) / len(minutes_list)

        # Convert back to hours:minutes
        avg_hour = int(avg_minutes // 60)
        avg_minute = int(avg_minutes % 60)
        avg_time = f"{avg_hour:02d}:{avg_minute:02d} (GMT+6)"

    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_url = web_server.get_stats_url(chat_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Stats URL for chat {chat_id}: {stats_url}")
    
    try:
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏
        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤\n\n"
        stats_message += f"–í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: {total_polls}\n"
        stats_message += f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {most_popular_option}\n"
        stats_message += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞: {avg_time}\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏ —ç—Ç–æ –∞–¥—Ä–µ—Å
        is_localhost = 'localhost' in stats_url or '127.0.0.1' in stats_url
        
        if is_localhost:
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            stats_message += "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            stats_message += f"{stats_url}\n\n"
            stats_message += "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            await update.message.reply_text(stats_message)
        else:
            # –î–ª—è —Ä–∞–±–æ—á–∏—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–Ω–æ–ø–∫—É
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            stats_message += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
            keyboard = [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", url=stats_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await update.message.reply_text(stats_message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        fallback_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤\n\n"
        fallback_message += f"–í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: {total_polls}\n"
        fallback_message += f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {most_popular_option}\n"
        fallback_message += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞: {avg_time}\n\n"
        fallback_message += f"–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{stats_url}"
        await update.message.reply_text(fallback_message)

async def set_poll_time_command(update, context):
    """Set custom poll time for a chat."""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)
    
    args = context.args
    
    if not args or len(args) < 1:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–æ—Å–∞.\n"
            "–§–æ—Ä–º–∞—Ç: /set_poll_time –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú AM/PM\n"
            "–ü—Ä–∏–º–µ—Ä—ã: /set_poll_time 21:30 –∏–ª–∏ /set_poll_time 9:30 pm\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ GMT+6."
        )
        return
    
    # Join all args in case there are spaces
    time_str = " ".join(args)
    
    # Parse and convert the time string to UTC
    utc_time_str = await scheduler.parse_time_string(time_str)
    
    if not utc_time_str:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú AM/PM.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 21:30 –∏–ª–∏ 9:30 pm"
        )
        return
    
    # Save to database
    success = await db.set_poll_time(chat_id, utc_time_str)
    
    if success:
        # Convert UTC back to GMT+6 for display
        hour, minute = map(int, utc_time_str.split(':'))
        dt = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
        dt += timedelta(hours=6)  # UTC to GMT+6
        gmt6_time = f"{dt.hour:02d}:{dt.minute:02d}"
        
        await update.message.reply_text(f"–í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {gmt6_time} (GMT+6).")
        
        # Reschedule the poll
        success = await scheduler.reschedule_poll_for_chat(
            context.job_queue,
            chat_id,
            send_poll
        )
        
        if not success:
            await update.message.reply_text(
                "–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. "
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è."
            )
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_poll_time_command(update, context):
    """Display the currently configured poll time."""
    chat_id = str(update.effective_chat.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)

    poll_time_str = await db.get_poll_time(chat_id)

    # Convert UTC time back to GMT+6 for display
    hour, minute = map(int, poll_time_str.split(':'))
    dt = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
    dt += timedelta(hours=6)
    gmt6_time = f"{dt.hour:02d}:{dt.minute:02d}"

    await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: {gmt6_time} (GMT+6)")

async def link_steam_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam ID —á–µ—Ä–µ–∑ OAuth"""
    user = update.effective_user
    chat = update.effective_chat
    message = update.message
    chat_id = str(chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)
    
    if not await db.is_user_registered(user.id):
        await db.register_user(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Steam ID –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    is_linked = await db.is_steam_id_linked_to_chat(user.id, chat_id)
    
    if is_linked:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        chat_name = await db.get_chat_name_by_id(chat_id) or "—ç—Ç–æ–º —á–∞—Ç–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await context.bot.send_message(
                chat_id=user.id,
                text=f"‚ùå –í–∞—à Steam ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ \"{chat_name}\", –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.\n\n"
                     f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unlink_steam –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ."
            )
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—É–¥–∞
            if chat.type != 'private':
                await message.reply_text(
                    f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, @{user.username or user.first_name}"
                )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            logger.error(f"Error sending private message to {user.id}: {e}")
            await message.reply_text(
                f"‚ùå –í–∞—à Steam ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ \"{chat_name}\", –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unlink_steam –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Steam OpenID —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID —á–∞—Ç–∞
    auth_url = web_server.get_steam_auth_url(user.id, chat_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Steam", url=auth_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ª–∏–±–æ –≤ –ª–∏—á–∫—É, –ª–∏–±–æ –≤ —á–∞—Ç
    if chat.type == 'private':
        await message.reply_text(
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Steam. "
            "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à Steam ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram.\n\n"
            "–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Steam OpenID.",
            reply_markup=reply_markup
        )
    else:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Steam. "
                "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à Steam ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram.\n\n"
                "–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Steam OpenID.",
                reply_markup=reply_markup
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            await message.reply_text(
                f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ Steam ID –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, @{user.username or user.first_name}"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            logger.error(f"Error sending private message to {user.id}: {e}")
            await message.reply_text(
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Steam. "
                "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à Steam ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram.\n\n"
                "–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Steam OpenID.",
                reply_markup=reply_markup
            )
    
    logger.info(f"User {user.id} ({user.username}) requested Steam authentication link for chat {chat_id}")

async def unlink_steam_command(update, context):
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Steam ID –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    user_id = user.id
    chat = update.effective_chat
    chat_id = str(chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await db.get_user_info(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Steam ID –∫ –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É
    is_linked = await db.is_steam_id_linked_to_chat(user_id, chat_id)
    
    if not is_linked:
        if chat.type == 'private':
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
            )
        else:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
                )
                await update.message.reply_text(
                    f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, @{user.username or user.first_name}"
                )
            except Exception as e:
                logger.error(f"Error sending private message to {user_id}: {e}")
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
                )
        return
    
    if not user_info or not user_info['steam_id']:
        if chat.type == 'private':
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
            )
        else:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
                )
                await update.message.reply_text(
                    f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, @{user.username or user.first_name}"
                )
            except Exception as e:
                logger.error(f"Error sending private message to {user_id}: {e}")
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Steam ID. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam. –í–ù–ò–ú–ê–ù–ò–ï: –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∑–¥–µ—Å—å!!"
                )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    chat_name = await db.get_chat_name_by_id(chat_id) or "—ç—Ç–æ–≥–æ —á–∞—Ç–∞"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º Steam –∞–∫–∫–∞—É–Ω—Ç–µ
    steam_id = user_info['steam_id']
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤—è–∑–∫–∏
    keyboard = [
        [InlineKeyboardButton("–î–∞, –æ—Ç–≤—è–∑–∞—Ç—å", callback_data=f"unlink_confirm:{user_id}:{chat_id}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"unlink_cancel:{user_id}:{chat_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á Steam –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    steam_api_key = os.environ.get("STEAM_API_KEY")
    
    message_text = ""
    
    if steam_api_key:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        profile_data = await steam.verify_steam_id(steam_id, steam_api_key)
        
        if profile_data:
            steam_name = profile_data['username']
            profile_url = profile_data['profile_url']
            
            message_text = (
                f"üîÑ <b>–û—Ç–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π Steam –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —á–∞—Ç–∞ \"{chat_name}\"?\n\n"
                f"<b>–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b>\n"
                f"Steam ID: <code>{steam_id}</code>\n"
                f"–ò–º—è: {steam_name}\n\n"
                f"–ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ Dota 2 –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
            keyboard.insert(0, [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=profile_url)])
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text = (
                f"üîÑ <b>–û—Ç–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π Steam –∞–∫–∫–∞—É–Ω—Ç (ID: <code>{steam_id}</code>) –æ—Ç —á–∞—Ç–∞ \"{chat_name}\"?\n\n"
                f"–ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ Dota 2 –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
            )
    else:
        message_text = (
            f"üîÑ <b>–û—Ç–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π Steam –∞–∫–∫–∞—É–Ω—Ç (ID: <code>{steam_id}</code>) –æ—Ç —á–∞—Ç–∞ \"{chat_name}\"?\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ Dota 2 –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤ –ª–∏—á–∫—É –∏–ª–∏ –≤ —á–∞—Ç
    if chat.type == 'private':
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            await update.message.reply_text(
                f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–≤—è–∑–∫–µ Steam ID –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, @{user.username or user.first_name}"
            )
        except Exception as e:
            logger.error(f"Error sending private message to {user_id}: {e}")
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    
    logger.info(f"User {user.first_name} ({user_id}) requested to unlink Steam ID {steam_id} from chat {chat_id}")

async def handle_unlink_steam_confirm(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏ Steam ID."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    parts = callback_data.split(':')
    user_id = int(parts[1])
    chat_id = parts[2] if len(parts) > 2 else None
    current_user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–≤—è–∑–∫—É
    if user_id != current_user_id:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    chat_name = await db.get_chat_name_by_id(chat_id) if chat_id else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"
    
    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Steam ID
    success = await db.remove_user_steam_id(user_id, chat_id)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ –í–∞—à Steam –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —á–∞—Ç–∞ \"{chat_name}\".\n\n"
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ Dota 2 –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /link_steam.",
            parse_mode='HTML'
        )
        logger.info(f"User {query.from_user.first_name} ({user_id}) unlinked their Steam ID from chat {chat_id}")
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Steam –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.error(f"Error unlinking Steam ID for user {user_id} from chat {chat_id}")

async def handle_unlink_steam_cancel(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ—Ç–≤—è–∑–∫–∏ Steam ID."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    parts = callback_data.split(':')
    user_id = parts[1]
    chat_id = parts[2] if len(parts) > 2 else None
    
    await query.edit_message_text(
        "‚ùå –û—Ç–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º."
    )
    
    logger.info(f"User {query.from_user.first_name} ({user_id}) canceled unlinking Steam ID from chat {chat_id}")

async def handle_poll_answer(update, context):
    """Handle when a user answers the poll."""
    answer = update.poll_answer
    poll_id = answer.poll_id
    user = update.effective_user
    selected_option = answer.option_ids[0] if answer.option_ids else None

    # Record this vote
    if selected_option is not None:
        await poll_state.add_vote(poll_id, user, selected_option)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ª–∏—á–Ω—ã–º
    for chat_id, poll_data in list(poll_state.active_polls.items()):
        if poll_data["poll_id"] == poll_id:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞
            numeric_chat_id = int(chat_id) if chat_id.lstrip('-').isdigit() else chat_id
            
            # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID
            is_personal_chat = isinstance(numeric_chat_id, int) and numeric_chat_id > 0
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç - –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
            if is_personal_chat:
                logger.info(f"–ì–æ–ª–æ—Å –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ {chat_id}, –æ–∂–∏–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç–∞")
                return
            
            # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤—Å–µ
            if poll_data["all_users"] and poll_data["all_users"].issubset(poll_data["voted_users"]):
                logger.info(f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —á–∞—Ç–µ {chat_id}, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å")
                await process_poll_results(chat_id, context)
            break

async def send_poll(chat_id, context, message, manual=False):
    """Send a poll to the specified chat."""
    try:
        # –ï—Å–ª–∏ chat_id —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –¥–ª—è Telegram API
        numeric_chat_id = int(chat_id) if chat_id.lstrip('-').isdigit() else chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        try:
            chat = await context.bot.get_chat(numeric_chat_id)
            if chat.title:
                await db.set_chat_name(chat_id, chat.title)
                logger.info(f"Updated chat name from send_poll: {chat_id} -> {chat.title}")
        except Exception as e:
            logger.warning(f"Could not get chat info for {chat_id}: {e}")
        
        # Send the leading message
        await context.bot.send_message(chat_id=numeric_chat_id, text=message)

        # Send the actual poll
        poll_message = await context.bot.send_poll(
            chat_id=numeric_chat_id,
            question=POLL_QUESTION,
            options=POLL_OPTIONS,
            is_anonymous=False,
        )

        # Store poll information
        poll_id = poll_message.poll.id
        message_id = poll_message.message_id
        trigger_type = "manual" if manual else "scheduled"
        await poll_state.create_poll(chat_id, poll_id, message_id, trigger_type)

        # Get chat members to track who needs to vote
        try:
            chat_members = await context.bot.get_chat_administrators(numeric_chat_id)
            for member in chat_members:
                if not member.user.is_bot:
                    poll_state.add_user_to_chat(chat_id, member.user.id)
        except BadRequest:
            # This might fail in some chat types
            logger.warning(f"Couldn't get chat members for {chat_id}")

        # Schedule the first reminder (after 10 minutes)
        first_reminder = context.application.create_task(
            send_reminder(chat_id, context, 10 * 60)
        )

        # Schedule poll closing (after 20 minutes)
        poll_timeout = context.application.create_task(
            close_poll_after_timeout(chat_id, context, 20 * 60)
        )

        # Save the final task (it will cancel and replace any previous tasks)
        poll_state.set_task(chat_id, poll_timeout)
    except Exception as e:
        logger.error(f"Error in send_poll: {e}", exc_info=True)

async def send_reminder(chat_id, context, delay):
    """Send a reminder to users who haven't voted."""
    await asyncio.sleep(delay)

    # Check if poll is still active
    if not poll_state.is_active(chat_id):
        return

    poll_data = poll_state.get_poll_data(chat_id)
    poll_data["first_ping_sent"] = True

    # Get users who haven't voted
    non_voted = poll_data["all_users"] - poll_data["voted_users"]
    if not non_voted:
        return

    # Format the ping message with usernames
    ping_message = ""
    for user_id in non_voted:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_info = await db.get_user_info(user_id)
        if user_info and user_info['username']:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            ping_message += f"@{user_info['username']} "
        elif user_info and user_info['first_name']:
            # –ï—Å–ª–∏ –Ω–µ—Ç username, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
            ping_message += f"{user_info['first_name']} "
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            ping_message += f"ID:{user_id} "

    if ping_message:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {ping_message}"
        )

async def close_poll_after_timeout(chat_id, context, delay):
    """Close the poll after the specified delay."""
    await asyncio.sleep(delay)

    # Check if poll is still active
    if not poll_state.is_active(chat_id):
        return

    poll_data = poll_state.get_poll_data(chat_id)

    try:
        # Stop the poll in Telegram
        await context.bot.stop_poll(
            chat_id=chat_id,
            message_id=poll_data["message_id"]
        )
    except BadRequest:
        # Poll might already be closed
        pass

    # Process the results
    await process_poll_results(chat_id, context)

async def process_poll_results(chat_id, context):
    """Process the poll results and send the appropriate message."""
    if not poll_state.is_active(chat_id):
        return

    poll_data = poll_state.get_poll_data(chat_id)
    votes = poll_data["votes"]

    # Group users by their vote category
    categories = {
        "accepted": [],
        "declined": [],
        "deferred": [],
    }

    for vote in votes.values():
        user = vote["user"]
        option = vote["option"]

        # Determine which category this option belongs to
        for category, indices in CATEGORY_MAPPING.items():
            if option in indices:
                categories[category].append(user.first_name)
                break

    # Determine which option was selected for the deferred category to set the right delay
    deferred_delay = None
    if categories["deferred"]:
        option_5_selected = False
        for vote in votes.values():
            if vote["option"] == 4:  # Index 4 is for "–ü–æ–ª—á–∞—Å–∏–∫–∞ –∏ –±—É–¥—É –ø–∞—Å–∞—Å—ç–æ"
                option_5_selected = True
                break

        if option_5_selected:
            deferred_delay = 30
        else:
            deferred_delay = random.randint(5, 10)

    # Construct the result message
    if categories["accepted"] and not categories["declined"] and not categories["deferred"]:
        result_message = "–°–∞—Å–∞—é—Ç –≤—Å–µ!"
    elif categories["declined"] and not categories["accepted"] and not categories["deferred"]:
        result_message = "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —Å–∞—Å–∞—Ç—å, –¥–∞–µ—à—å –æ—Ç–¥—ã—Ö –≥–ª–æ—Ç–∫–µ!"
    elif not categories["accepted"] and not categories["declined"] and not categories["deferred"]:
        result_message = "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —Å–∞—Å–∞—Ç—å, –¥–∞–µ—à—å –æ—Ç–¥—ã—Ö –≥–ª–æ—Ç–∫–µ!"
    elif not categories["accepted"] and not categories["declined"] and categories["deferred"]:
        result_message = f"–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ —Å–∞—Å–∞—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å {deferred_delay} –º–∏–Ω—É—Ç"
    else:
        result_message = ""
        if categories["accepted"]:
            result_message += f"–ì–æ—Ç–æ–≤—ã —Å–∞—Å–∞—Ç—å: {', '.join(categories['accepted'])}! "
        if categories["declined"]:
            result_message += f"–û—Ç–∫–∞–∑–∞–ª–∏—Å—å —Å–∞—Å–∞—Ç—å: {', '.join(categories['declined'])}. "
        if categories["deferred"]:
            result_message += f"–û—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç —Å–∞—Å–∞–Ω–∏–µ: {', '.join(categories['deferred'])}. "

    # Add info about users who didn't vote
    non_voted = poll_data["all_users"] - poll_data["voted_users"]
    if non_voted and poll_data["first_ping_sent"]:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        non_voted_names = []
        for user_id in non_voted:
            user_info = await db.get_user_info(user_id)
            if user_info:
                if user_info['username']:
                    non_voted_names.append(f"@{user_info['username']}")
                elif user_info['first_name']:
                    non_voted_names.append(user_info['first_name'])
                else:
                    non_voted_names.append(f"ID:{user_id}")
            else:
                non_voted_names.append(f"ID:{user_id}")
        
        result_message += f"\n–ù–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {', '.join(non_voted_names)}"

    # Send result message
    await context.bot.send_message(chat_id=chat_id, text=result_message)

    # Close the poll in our state
    await poll_state.close_poll(chat_id)

async def schedule_new_poll(chat_id, context, delay):
    """Schedule a new poll after the specified delay."""
    await asyncio.sleep(delay)
    await send_poll(chat_id, context, "Ah shit, here we go again!")

async def setup_commands(application):
    """Set up bot commands to be suggested in the Telegram UI."""
    commands = [
        BotCommand("pol_now", "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é"),
        BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞"),
        BotCommand("stop_poll", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å"),
        BotCommand("link_steam", "–ü—Ä–∏–≤—è–∑–∞—Ç—å Steam ID"),
        BotCommand("unlink_steam", "–û—Ç–≤—è–∑–∞—Ç—å Steam ID"),
        BotCommand("who_is_playing", "–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç –≤ Dota 2"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand("set_poll_time", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (–ß–ß:–ú–ú)"),
        BotCommand("get_poll_time", "–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞")
    ]
    
    # Set commands globally
    await application.bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    
    # Set commands for all registered chats
    for chat_id in poll_state.registered_chats:
        try:
            await application.bot.set_my_commands(
                commands, 
                scope=BotCommandScopeChat(chat_id=chat_id)
            )
            logger.info(f"Commands set up for chat {chat_id}")
        except Exception as e:
            logger.error(f"Failed to set commands for chat {chat_id}: {e}")
    
    logger.info("Bot commands have been set up")

async def who_is_playing_command(update, context):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
    chat_id = str(update.effective_chat.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await update_chat_name(update, chat_id)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_message = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤...", reply_to_message_id=update.message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º Steam API –∫–ª—é—á
        steam_api_key = os.environ.get("STEAM_API_KEY")
        if not steam_api_key:
            await status_message.edit_text("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω API –∫–ª—é—á Steam. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ API Telegram
        user_steam_ids = {}
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
            async with db.db_semaphore:
                with db.safe_db_connect() as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                    SELECT usc.telegram_id, usc.steam_id, u.first_name
                    FROM user_steam_chats usc
                    JOIN users u ON usc.telegram_id = u.telegram_id
                    WHERE usc.chat_id = ? AND usc.steam_id IS NOT NULL
                    """, (chat_id,))
                    
                    steam_users = cursor.fetchall()
                    
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(steam_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Steam ID –≤ —á–∞—Ç–µ {chat_id}")
            
            # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            dota_players = []
            online_users = []
            offline_users = []
            other_game_players = []
            
            # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not steam_users:
                await status_message.edit_text("‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Steam ID.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_steam –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                return
                
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            for user_id, steam_id, first_name in steam_users:
                user_steam_ids[user_id] = {
                    'steam_id': steam_id,
                    'first_name': first_name,
                    'has_link_issue': False
                }
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Steam –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Steam ID
            if user_steam_ids:
                # –°–æ–∑–¥–∞–µ–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
                ssl_context = ssl.create_default_context()
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                if len(user_steam_ids) > 1:
                    await status_message.edit_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å {len(user_steam_ids)} –∏–≥—Ä–æ–∫–æ–≤...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Steam API.")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 2 —Å–µ–∫—É–Ω–¥—ã
                for i, (user_id, user_data) in enumerate(user_steam_ids.items()):
                    steam_id = user_data['steam_id']
                    first_name = user_data['first_name']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Steam API
                    if i > 0:
                        await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if len(user_steam_ids) > 1:
                        await status_message.edit_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å {i+1}/{len(user_steam_ids)} –∏–≥—Ä–æ–∫–æ–≤...\n\n–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è—é: {first_name}")
                    
                    try:
                        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
                            url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key={steam_api_key}&steamids={steam_id}"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 429
                            max_retries = 3
                            for retry in range(max_retries):
                                try:
                                    async with session.get(url) as response:
                                        if response.status == 429:  # Too Many Requests
                                            logger.warning(f"–û—à–∏–±–∫–∞ API Steam 429 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}, –ø–æ–ø—ã—Ç–∫–∞ {retry+1}/{max_retries}")
                                            if retry < max_retries - 1:
                                                wait_time = (retry + 1) * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                                await asyncio.sleep(wait_time)
                                                continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                                            else:
                                                logger.error(f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Steam API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}")
                                                offline_users.append(first_name)
                                                break
                                        
                                        if response.status != 200:
                                            logger.error(f"–û—à–∏–±–∫–∞ API Steam: {response.status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}")
                                            offline_users.append(first_name)
                                            break
                                        
                                        data = await response.json()
                                        players = data.get('response', {}).get('players', [])
                                        
                                        if not players:
                                            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Steam {steam_id}")
                                            offline_users.append(first_name)
                                            break
                                        
                                        player = players[0]
                                        
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
                                        persona_state = player.get('personastate', 0)  # 0 = offline, 1+ = online
                                        game_id = player.get('gameid', None)
                                        game_name = player.get('gameextrainfo', None)
                                        
                                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                        logger.info(f"–°—Ç–∞—Ç—É—Å Steam –¥–ª—è {first_name}: –ø–µ—Ä—Å–æ–Ω–∞={persona_state}, –∏–≥—Ä–∞={game_id} ({game_name})")
                                        
                                        if game_id == "570":  # Dota 2
                                            dota_players.append(first_name)
                                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –∏–≥—Ä–∞–µ—Ç –≤ Dota 2")
                                        elif game_id:  # –î—Ä—É–≥–∞—è –∏–≥—Ä–∞
                                            game_display_name = game_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞"
                                            other_game_players.append((first_name, game_display_name))
                                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –∏–≥—Ä–∞–µ—Ç –≤ {game_display_name}")
                                        elif persona_state > 0:  # –û–Ω–ª–∞–π–Ω, –Ω–æ –Ω–µ –≤ –∏–≥—Ä–µ
                                            online_users.append(first_name)
                                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –æ–Ω–ª–∞–π–Ω")
                                        else:  # –û—Ñ—Ñ–ª–∞–π–Ω
                                            offline_users.append(first_name)
                                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –æ—Ñ—Ñ–ª–∞–π–Ω")
                                        
                                        # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
                                        break
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Steam API –¥–ª—è {first_name}: {e}")
                                    if retry < max_retries - 1:
                                        wait_time = (retry + 1) * 5
                                        await asyncio.sleep(wait_time)
                                    else:
                                        offline_users.append(first_name)
                                        break
                                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Steam –¥–ª—è {first_name} ({steam_id}): {e}")
                        offline_users.append(first_name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            if len(offline_users) == len(user_steam_ids) and user_steam_ids:
                status_text = "–°–µ–π—á–∞—Å –≤—Å–µ –æ—Ñ—Ñ–ª–∞–π–Ω"
            elif len(dota_players) == len(user_steam_ids) and user_steam_ids:
                status_text = "–°–µ–π—á–∞—Å –≤—Å–µ –∏–≥—Ä–∞—é—Ç –≤ Dota 2"
            else:
                lines = []

                if dota_players:
                    lines.append("–í Dota 2:")
                    lines.append(", ".join(dota_players))

                if other_game_players:
                    lines.append("–í –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ:")

                    game_groups = {}
                    for name, game in other_game_players:
                        game_groups.setdefault(game, []).append(name)

                    for game, players in game_groups.items():
                        players_str = ", ".join(players)
                        lines.append(f"{players_str}: {game}")

                if online_users:
                    lines.append("–û–Ω–ª–∞–π–Ω:")
                    lines.append(", ".join(online_users))

                if offline_users and len(offline_users) != len(user_steam_ids):
                    lines.append("–û—Ñ—Ñ–ª–∞–π–Ω:")
                    lines.append(", ".join(offline_users))

                lines.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_steam_ids)}")

                if lines:
                    status_text = "\n".join(lines)
                else:
                    status_text = "–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text(status_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {str(e)}")
            return
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ who_is_playing: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
